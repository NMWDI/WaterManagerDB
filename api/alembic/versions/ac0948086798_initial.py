"""initial

Revision ID: ac0948086798
Revises: 
Create Date: 2022-12-06 14:25:25.169559

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2

# revision identifiers, used by Alembic.
revision = 'ac0948086798'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('MeterStatusLU',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_MeterStatusLU_id'), 'MeterStatusLU', ['id'], unique=False)
    op.create_table('ObservedProperty',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ObservedProperty_id'), 'ObservedProperty', ['id'], unique=False)
    op.create_table('Owner',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Owner_id'), 'Owner', ['id'], unique=False)
    op.create_table('PartTypeLU',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_PartTypeLU_id'), 'PartTypeLU', ['id'], unique=False)
    op.create_table('User',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('disabled', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_User_id'), 'User', ['id'], unique=False)
    op.create_table('Worker',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Worker_id'), 'Worker', ['id'], unique=False)
    op.create_table('Part',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('part_type_id', sa.Integer(), nullable=True),
    sa.Column('part_number', sa.String(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('vendor', sa.String(), nullable=True),
    sa.Column('note', sa.String(), nullable=True),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['part_type_id'], ['PartTypeLU.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Part_id'), 'Part', ['id'], unique=False)
    op.create_table('QC',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_QC_id'), 'QC', ['id'], unique=False)
    op.create_table('Well',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('township', sa.Integer(), nullable=True),
    sa.Column('range', sa.Integer(), nullable=True),
    sa.Column('section', sa.Integer(), nullable=True),
    sa.Column('quarter', sa.Integer(), nullable=True),
    sa.Column('half_quarter', sa.Integer(), nullable=True),
    sa.Column('quarter_quarter', sa.Integer(), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POINT', from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('osepod', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['Owner.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_Well_geom', 'Well', ['geom'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_index(op.f('ix_Well_id'), 'Well', ['id'], unique=False)
    op.create_table('Meter',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('serial_year', sa.Integer(), nullable=True),
    sa.Column('serial_case_diameter', sa.Integer(), nullable=True),
    sa.Column('serial_id', sa.Integer(), nullable=True),
    sa.Column('part_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['part_id'], ['Part.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Meter_id'), 'Meter', ['id'], unique=False)
    op.create_table('Repair',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('well_id', sa.Integer(), nullable=True),
    sa.Column('worker_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('h2o_read', sa.Float(), nullable=True),
    sa.Column('e_read', sa.String(), nullable=True),
    sa.Column('new_read', sa.String(), nullable=True),
    sa.Column('repair_description', sa.LargeBinary(), nullable=True),
    sa.Column('note', sa.LargeBinary(), nullable=True),
    sa.Column('meter_status_id', sa.Integer(), nullable=True),
    sa.Column('preventative_maintenance', sa.String(), nullable=True),
    sa.Column('qc_id', sa.Integer(), nullable=True),
    sa.Column('public_release', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['meter_status_id'], ['MeterStatusLU.id'], ),
    sa.ForeignKeyConstraint(['qc_id'], ['QC.id'], ),
    sa.ForeignKeyConstraint(['well_id'], ['Well.id'], ),
    sa.ForeignKeyConstraint(['worker_id'], ['Worker.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Repair_id'), 'Repair', ['id'], unique=False)
    op.create_table('WellConstruction',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('casing_diameter', sa.Float(), nullable=True),
    sa.Column('hole_depth', sa.Float(), nullable=True),
    sa.Column('well_depth', sa.Float(), nullable=True),
    sa.Column('well_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['well_id'], ['Well.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_WellConstruction_id'), 'WellConstruction', ['id'], unique=False)
    op.create_table('WellMeasurement',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('value', sa.Float(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('well_id', sa.Integer(), nullable=True),
    sa.Column('observed_property_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['observed_property_id'], ['ObservedProperty.id'], ),
    sa.ForeignKeyConstraint(['well_id'], ['Well.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_WellMeasurement_id'), 'WellMeasurement', ['id'], unique=False)
    op.create_table('Alert',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('alert', sa.String(), nullable=True),
    sa.Column('meter_id', sa.Integer(), nullable=True),
    sa.Column('open_timestamp', sa.DateTime(), nullable=True),
    sa.Column('closed_timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['meter_id'], ['Meter.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Alert_id'), 'Alert', ['id'], unique=False)
    op.create_table('MeterHistory',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('well_id', sa.Integer(), nullable=True),
    sa.Column('meter_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('note', sa.LargeBinary(), nullable=True),
    sa.ForeignKeyConstraint(['meter_id'], ['Meter.id'], ),
    sa.ForeignKeyConstraint(['well_id'], ['Well.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_MeterHistory_id'), 'MeterHistory', ['id'], unique=False)
    op.create_table('MeterParts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('meter_id', sa.Integer(), nullable=True),
    sa.Column('part_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['meter_id'], ['Meter.id'], ),
    sa.ForeignKeyConstraint(['part_id'], ['Part.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_MeterParts_id'), 'MeterParts', ['id'], unique=False)
    op.create_table('RepairPartAssociation',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('repair_id', sa.Integer(), nullable=True),
    sa.Column('part_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['part_id'], ['Part.id'], ),
    sa.ForeignKeyConstraint(['repair_id'], ['Repair.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_RepairPartAssociation_id'), 'RepairPartAssociation', ['id'], unique=False)
    op.create_table('ScreenInterval',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('top', sa.Float(), nullable=True),
    sa.Column('bottom', sa.Float(), nullable=True),
    sa.Column('well_construction_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['well_construction_id'], ['WellConstruction.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ScreenInterval_id'), 'ScreenInterval', ['id'], unique=False)

    # op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('spatial_ref_sys',
    # sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.CheckConstraint('(srid > 0) AND (srid <= 998999)', name='spatial_ref_sys_srid_check'),
    # sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    # )

    op.drop_index(op.f('ix_ScreenInterval_id'), table_name='ScreenInterval')
    op.drop_table('ScreenInterval')
    op.drop_index(op.f('ix_RepairPartAssociation_id'), table_name='RepairPartAssociation')
    op.drop_table('RepairPartAssociation')
    op.drop_index(op.f('ix_MeterParts_id'), table_name='MeterParts')
    op.drop_table('MeterParts')
    op.drop_index(op.f('ix_MeterHistory_id'), table_name='MeterHistory')
    op.drop_table('MeterHistory')
    op.drop_index(op.f('ix_Alert_id'), table_name='Alert')
    op.drop_table('Alert')
    op.drop_index(op.f('ix_WellMeasurement_id'), table_name='WellMeasurement')
    op.drop_table('WellMeasurement')
    op.drop_index(op.f('ix_WellConstruction_id'), table_name='WellConstruction')
    op.drop_table('WellConstruction')
    op.drop_index(op.f('ix_Repair_id'), table_name='Repair')
    op.drop_table('Repair')
    op.drop_index(op.f('ix_Meter_id'), table_name='Meter')
    op.drop_table('Meter')
    op.drop_index(op.f('ix_Well_id'), table_name='Well')
    op.drop_index('idx_Well_geom', table_name='Well', postgresql_using='gist', postgresql_ops={})
    op.drop_table('Well')
    op.drop_index(op.f('ix_QC_id'), table_name='QC')
    op.drop_table('QC')
    op.drop_index(op.f('ix_Part_id'), table_name='Part')
    op.drop_table('Part')
    op.drop_index(op.f('ix_Worker_id'), table_name='Worker')
    op.drop_table('Worker')
    op.drop_index(op.f('ix_User_id'), table_name='User')
    op.drop_table('User')
    op.drop_index(op.f('ix_PartTypeLU_id'), table_name='PartTypeLU')
    op.drop_table('PartTypeLU')
    op.drop_index(op.f('ix_Owner_id'), table_name='Owner')
    op.drop_table('Owner')
    op.drop_index(op.f('ix_ObservedProperty_id'), table_name='ObservedProperty')
    op.drop_table('ObservedProperty')
    op.drop_index(op.f('ix_MeterStatusLU_id'), table_name='MeterStatusLU')
    op.drop_table('MeterStatusLU')
    # ### end Alembic commands ###
